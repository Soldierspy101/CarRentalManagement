@page "/vehicles/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@using CarRentalManagementPE_01.Client.Shared

<h3 class="car-title">Car Vehicle</h3>

@if (Vehicles == null)
{
    <div class="alert alert-info">Loading Vehicles....</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Vehicle</th>
                <th>Model</th>
                <th>Year</th>
                <th>License Plate Number</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vehicle in Vehicles)
            {
                <tr>
                    <td>@vehicle.Make.Name</td>
                    <td>@vehicle.Model.Name</td>
                    <td>@vehicle.Year</td>
                    <td>@vehicle.LicencePlateNumber </td>
                    <td>
                        <a href="/Bookings/view/@vehicle.Id" class=" btn btn-primary">
                            <span class=" oi oi-book"></span>
                        </a>

                        <a href="/Bookings/view/@vehicle.Id" class=" btn btn-warning">
                            <span class=" oi oi-pencil"></span>
                        </a>

                        <button class=" btn btn-danger" @onclick="@(()=>Delete(vehicle.Id))">
                            <span class=" oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<br />
@code {
    private List<Vehicle>? Vehicles;
    protected async override Task OnInitializedAsync()
    {
        Vehicles = await _client.GetFromJsonAsync<List<Vehicle>>($"{Endpoints.VehiclesEndpoint}");
    }
    async Task Delete(int VehicleID)
    {
        if (Vehicles != null)
        {
            var Vehicle = Vehicles.First(q => q.Id == VehicleID);
            var confirm = await js.InvokeAsync<bool>("Confirm", $"Do you want to delete {Vehicle.LicencePlateNumber}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.VehiclesEndpoint}{VehicleID}");
                await OnInitializedAsync();
            }
        }
    }
}